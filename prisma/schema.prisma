// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Schema for furniture ERP shop
// To manage retail and wholesale and warehouse

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id           Int    @id @default(autoincrement())
  businessName String
  email        String @unique
  phone        String @unique
  address      String
  // code    String @unique

  User User[]

  // GST details

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()

  Product              Product[]
  Category             Category[]
  Warehouse            Warehouse[]
  ProductType          ProductType[]
  Supplier             Supplier[]
  PurchaseOrder        PurchaseOrder[]
  PurchaseOrderInvoice PurchaseOrderInvoice[]
  Sales                Sales[]
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String?
  lastName        String?
  phone           String?
  avatar          String?
  password        String
  role            Role      @default(USER)
  createdProducts Product[] @relation("CreatedByRelation")
  updatedProducts Product[] @relation("UpdatedByRelation")

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  Int?

  Warehouse              Warehouse[] // manager
  Supplier               Supplier[]
  PurchaseOrder          PurchaseOrder[]
  PurchaseOrderStatusLog PurchaseOrderStatusLog[]
  updatedSales           Sales[]                  @relation("updatedBy")
  Sales                  Sales[]                  @relation("createdBy")
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  code        String
  sku         String?

  // pricing
  baseAmount   Float
  otherCharges Float @default(0) // tax free amount
  totalAmount  Float
  taxSlab      Float
  cgst         Float @default(0)
  sgst         Float @default(0)
  igst         Float @default(0)
  discount     Float @default(0)

  images String[]

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  updatedBy   User?    @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById Int
  createdBy   User     @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @updatedAt @db.Timestamp()

  Category         Category[]
  WarehouseProduct Warehouse_Product[]
  ProductType      ProductType         @relation(fields: [productTypeId], references: [id])
  productTypeId    Int
  PurchaseOrder    PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  Int?
  Tags             ProductTags?        @relation(fields: [productTagsId], references: [id])
  productTagsId    Int?
}

model ProductType {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  Products Product[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  Products  Product[]

  client      Client        @relation(fields: [clientId], references: [id])
  clientId    Int
  SubCategory SubCategory[]
}

model SubCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt  DateTime @default(now()) @db.Timestamp()
  updatedAt  DateTime @updatedAt @db.Timestamp()
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Warehouse {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  address  String

  createdAt        DateTime            @default(now()) @db.Timestamp()
  updatedAt        DateTime            @updatedAt @db.Timestamp()
  WarehouseProduct Warehouse_Product[]

  manager   User? @relation(fields: [managerId], references: [id])
  managerId Int?

  client      Client  @relation(fields: [clientId], references: [id])
  clientId    Int
  Sales       Sales[] @relation("WarehouseSales")
  ReturnSales Sales[] @relation("ReturnWarehouseSales")
}

model Warehouse_Product {
  id          Int       @id @default(autoincrement())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  stock       Int

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt @db.Timestamp()
}

model ProductTags {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @updatedAt @db.Timestamp()
  products  Product[]
}

// Money money

model Supplier {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String
  phone     String
  address   String
  gstin     String?

  createdAt     DateTime        @default(now()) @db.Timestamp()
  updatedAt     DateTime        @updatedAt @db.Timestamp()
  client        Client          @relation(fields: [clientId], references: [id])
  clientId      Int
  PurchaseOrder PurchaseOrder[]

  // createdBy user
  createdBy   User? @relation(fields: [createdById], references: [id])
  createdById Int?
}

model PurchaseOrder {
  id Int @id @default(autoincrement())

  name                      String?
  description               String?
  notes                     String?
  quantity                  Int
  // dates
  deliveryDate              DateTime?
  orderDate                 DateTime
  // statuses
  orderStatus               PURCHASE_ORDER_STATUS         @default(DRAFT)
  paymentStatus             PURCHASE_ORDER_PAYMENT_STATUS @default(UNPAID)
  // pricing
  totalAmountPaid           Float                         @default(0)
  totalAmountDue            Float                         @default(0)
  // createdBy user
  createdBy                 User?                         @relation(fields: [createdById], references: [id])
  createdById               Int?
  // timestamps
  createdAt                 DateTime                      @default(now()) @db.Timestamp()
  updatedAt                 DateTime                      @updatedAt @db.Timestamp()
  // relations
  client                    Client                        @relation(fields: [clientId], references: [id])
  clientId                  Int
  supplier                  Supplier                      @relation(fields: [supplierId], references: [id])
  supplierId                Int
  Products                  Product[]
  PurchaseOrderInvoice      PurchaseOrderInvoice?
  PurchaseOrderTransactions PurchaseOrderTransaction[]
  PurchaseOrderStatusLog    PurchaseOrderStatusLog[]
}

model PurchaseOrderInvoice {
  id            Int     @id @default(autoincrement())
  invoiceNumber String
  remarks       String?

  invoiceDate    DateTime?
  invoiceDueDate DateTime?

  baseAmount      Float
  otherCharges    Float         @default(0) // tax free amount
  totalAmount     Float         @default(0)
  taxSlab         Float         @default(0)
  cgst            Float         @default(0)
  sgst            Float         @default(0)
  igst            Float         @default(0)
  discount        Float         @default(0)
  // relations
  // timestamps
  createdAt       DateTime      @default(now()) @db.Timestamp()
  updatedAt       DateTime      @updatedAt @db.Timestamp()
  PurchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int           @unique
  client          Client        @relation(fields: [clientId], references: [id])
  clientId        Int
}

model PurchaseOrderStatusLog {
  id              Int                   @id @default(autoincrement())
  PurchaseOrder   PurchaseOrder         @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int
  status          PURCHASE_ORDER_STATUS
  remarks         String?
  note            String?
  logs            String?

  updatedBy   User?    @relation(fields: [updatedById], references: [id])
  updatedById Int?
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @updatedAt @db.Timestamp()
}

model PurchaseOrderTransaction {
  id Int @id @default(autoincrement())

  amount                  Float
  remarks                 String?
  type                    TRANSACTION_TYPE @default(NORMAL)
  transactionDate         DateTime
  externalReferenceNumber String?

  transactionMode TRANSACTION_MODE @default(CASH)

  createdAt       DateTime       @default(now()) @db.Timestamp()
  updatedAt       DateTime       @updatedAt @db.Timestamp()
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int?
}

enum PURCHASE_ORDER_STATUS {
  DRAFT
  PLACED
  IN_TRANSIT
  DELIVERED
}

enum PURCHASE_ORDER_PAYMENT_STATUS {
  PAID
  PARTIALLY_PAID
  UNPAID
}

enum TRANSACTION_TYPE {
  ADVANCE
  NORMAL
}

enum TRANSACTION_MODE {
  CASH
  CARD
  UPI
  NET_BANKING
  CHEQUE
  OTHER
}

// Retail

model Sales {
  id            Int       @id @default(autoincrement())
  customerName  String
  customerPhone String
  productName   String
  amount        Float
  warehouseId   Int
  warehouse     Warehouse @relation("WarehouseSales", fields: [warehouseId], references: [id])

  clientId Int
  Client   Client @relation(fields: [clientId], references: [id])

  isReturn          Boolean    @default(false)
  returnWarehouseId Int?
  returnWarehouse   Warehouse? @relation("ReturnWarehouseSales", fields: [returnWarehouseId], references: [id]) // if return

  updatedById Int?
  updatedBy   User?    @relation("updatedBy", fields: [updatedById], references: [id])
  createdById Int
  createdBy   User     @relation("createdBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @updatedAt @db.Timestamp()
}
